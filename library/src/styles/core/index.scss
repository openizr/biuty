/**
 * Copyright (c) Matthieu Jabbour. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

@import './_helpers';

/**
 * Defines element's shadows.
 *
 * @param {none|(pixel pixel pixel pixel color [inset])[]} $shadows Shadows to apply to the
 * element. Values are repectively: horizontal offset, vertical offset, blur, spread, color, type.
 * Example:
 * `10px 10px 5px 30px black, 4px 4px 10px 5px blue inset`
*/
@mixin ui-shadows($shadows...) {
  @if (nth($shadows, 1) == none) {
    box-shadow: none;
  } @else {
    $finalShadows: ();
    // For each given shadow...
    @for $index from 0 to length($shadows) {
      $shadow: nth($shadows, $index + 1);
      $check: ui-check-length($shadow, 5, 6, 'Each shadow must contain 5 or 6 values');
      $check: ui-check-type(nth($shadow, 1), pixel, 'Horizontal offset must be a value in pixels');
      $check: ui-check-type(nth($shadow, 2), pixel, 'Vertical offset must be a value in pixels');
      $check: ui-check-type(nth($shadow, 3), pixel, 'Blur must be a value in pixels');
      $check: ui-check-type(nth($shadow, 4), pixel, 'Spread must be a value in pixels');
      $check: ui-check-type(nth($shadow, 5), color, 'Color must be a color');
      @if (length($shadow) == 6) {
        $check: ui-check-type(nth($shadow, 6), inset, 'Shadow type must be `inset`');
      }
      $finalShadows: append($finalShadows, $shadow, comma);
    }
    box-shadow: $finalShadows;
  }
}

/**
 * Defines element's background.
 *
 * @param {color|none} $color Background color.
 *
 * @param {string} [$uri = none] Background image's URI.
 *
 * @param {(grid|percent|auto)[]} [$size = auto] Background image's size.
 *
 * @param {padding-box|border-box|content-box} [$origin = padding-box] Background image's origin.
 *
 * @param {(grid|percent)[]} [$position = 0% 0%] Background image's position.
 *
 * @param {repeat|repeat-x|repeat-y|no-repeat} [$repeat = no-repeat] Background repetition pattern.
 *
 * @param {border-box|padding-box|content-box} [$clip = border-box] How far background should extend
 * within element.
 *
 * @param {scroll|fixed|local} [$attachment = scroll] Should background scroll with element.
 */
@mixin ui-background(
  $color,
  $uri: none,
  $size: auto,
  $position: 0% 0%,
  $origin: padding-box,
  $repeat: no-repeat,
  $clip: border-box,
  $attachment: scroll
) {
  @if ($color == none) {
    background: none;
  } @else if ($uri == none) {
    $check: ui-check-type($color, color, 'Color must be a color');
    background: $color;
  } @else {
    $errorMessage: 'Size must be a list of one or two values in grid pixels or percents or `auto`';
    $check: ui-check-length($size, 1, 2, $errorMessage);
    $width: nth($size, 1);
    $height: if(length($size) == 2, nth($size, 2), $width);
    $check: ui-check-type($width, auto grid percent, $errorMessage);
    $check: ui-check-type($height, auto grid percent, $errorMessage);
    $errorMessage: 'Position must be a list of one or two values in grid pixels or percents';
    $check: ui-check-length($position, 1, 2, $errorMessage);
    $x: nth($position, 1);
    $y: if(length($position) == 2, nth($position, 2), $x);
    $check: ui-check-type($x, grid percent, $errorMessage);
    $check: ui-check-type($y, grid percent, $errorMessage);
    $check: ui-check-type($uri, string, 'URI must be a valid URI');
    $errorMessage: 'Origin must be `padding-box`, `border-box` or `content-box`';
    $check: ui-check-type($origin, padding-box border-box content-box, $errorMessage);
    $errorMessage: 'Repetition pattern must be `repeat`, `repeat-x`, `repeat-y` or `no-repeat`';
    $check: ui-check-type($repeat, repeat repeat-x repeat-y no-repeat, $errorMessage);
    $errorMessage: 'Clip must be `border-box`, `padding-box` or `content-box`';
    $check: ui-check-type($clip, border-box padding-box content-box, $errorMessage);
    $errorMessage: 'Attachment must be `scroll`, `fixed` or `local`';
    $check: ui-check-type($attachment, scroll fixed local, $errorMessage);
    background: $color
      url($uri)
      ui-transpile($x $y)
      unquote('/')
      ui-transpile($width $height)
      $repeat
      $origin
      $clip
      $attachment;
  }
}

/**
 * Defines element's borders.
 *
 * @param {(pixel borderstyle color)|none} [$top = 0px] Top border.
 *
 * @param {(pixel borderstyle color)|none} [$right = 0px] Right border.
 *
 * @param {(pixel borderstyle color)|none} [$bottom = 0px] Bottom border.
 *
 * @param {(pixel borderstyle color)|none} [$left = 0px] Left border.
 *
 * @param {grid[]} [$radius = 0gp] Borders radiuses.
 */
@mixin ui-borders($top: 0px, $right: 0px, $bottom: 0px, $left: 0px, $radius: 0gp) {
  $errorMessage: 'Top border must be `none` or contain a value in pixels, a border style and a color';
  $check: ui-check-length($top, 1, 3, $errorMessage);
  $check: ui-check-type($top, none pixel borderstyle color, $errorMessage);
  $errorMessage: 'Right border must be `none` or contain a value in pixels, a border style and a color';
  $check: ui-check-length($right, 1, 3, $errorMessage);
  $check: ui-check-type($right, none pixel borderstyle color, $errorMessage);
  $errorMessage: 'Bottom border must be `none` or contain a value in pixels, a border style and a color';
  $check: ui-check-length($bottom, 1, 3, $errorMessage);
  $check: ui-check-type($bottom, none pixel borderstyle color, $errorMessage);
  $errorMessage: 'Left border must be `none` or contain a value in pixels, a border style and a color';
  $check: ui-check-length($left, 1, 3, $errorMessage);
  $check: ui-check-type($left, none pixel borderstyle color, $errorMessage);
  $errorMessage: 'Border radius must be a list of 1, 2 or 4 grid pixels values';
  $check: ui-check-length($radius, 1, 4, $errorMessage);
  $check: ui-check-type($radius, grid, $errorMessage);

  // Allows user to use first parameter as a shorthand for all borders.
  @if ($right == 0px and $bottom == 0px and $left == 0px) {
    border: $top;
  }
  // Allows user to use first parameters as shorthands for top/bottom and left/right borders.
  @else if ($left == 0px and $bottom == 0px) {
    border-top: $top;
    border-bottom: $top;
    border-right: $right;
    border-left: $right;
  } @else {
    border-top: $top;
    border-right: $right;
    border-bottom: $bottom;
    border-left: $left;
  }

  // Allows user to use one radius value as a shorthand for all borders.
  @if (length($radius) == 1) {
    border-radius: ui-transpile($radius);
  }
  // Allows user to use two radius values as shorthands for all borders.
  @else if (length($radius) == 2) {
    border-top-left-radius: ui-transpile(nth($radius, 1));
    border-top-right-radius: ui-transpile(nth($radius, 1));
    border-bottom-left-radius: ui-transpile(nth($radius, 2));
    border-bottom-right-radius: ui-transpile(nth($radius, 2));
  } @else {
    border-top-left-radius: ui-transpile(nth($radius, 1));
    border-top-right-radius: ui-transpile(nth($radius, 2));
    border-bottom-left-radius: ui-transpile(nth($radius, 3));
    border-bottom-right-radius: ui-transpile(nth($radius, 4));
  }
}

/**
 * Defines element's border image.
 *
 * @param {string} $source Image URI.
 *
 * @param {(pixel|percent)[]} $width Border width.
 *
 * @param {percent|pixel} [$slice = 100%] How to slice border image.
 *
 * @param {pixel[]} [$outset = 0px] Border image's outset.
 *
 * @param {stretch|repeat|round} [$repeat = stretch] Border image's Repeat pattern.
 */
@mixin ui-border-image($source, $width, $slice: 100%, $outset: 0px, $repeat: stretch) {
  $repeats: stretch repeat round;
  $check: ui-check-type($source, string, 'Source must be a valid URI');
  $errorMessage: 'Width must be a list of one to four pixels or percents values';
  $check: ui-check-length($width, 1, 4, $errorMessage);
  $check: ui-check-type($width, percent pixel, $errorMessage);
  $check: ui-check-type($slice, percent number, 'Slice must be a value in percents or a number');
  $check: ui-check-length($outset, 1, 4, 'Outset must be a list of one to four values in pixels');
  $check: ui-check-type($outset, pixel, 'Outset must be a list of one to four values in pixels');
  $check: ui-check-type($repeat, $repeats, 'Repeat pattern must be `stretch`, `repeat` or `round`');
  border-image: url($source) $repeat;
  border-image-outset: $outset;
  border-image-slice: $slice;
  border-image-width: $width;
}

/**
 * Defines element's outline.
 *
 * @param {pixel} $width Outline width.
 *
 * @param {borderstyle} $style Outline style.
 *
 * @param {color} $color Outline color.
 *
 * @param {pixel} [$offset = 0px] Outline offset.
 */
@mixin ui-outline($width, $style, $color, $offset: 0px) {
  $check: ui-check-type($width, pixel, 'Width must be a value in pixels');
  $check: ui-check-type($style, borderstyle, 'Style must be a border style');
  $check: ui-check-type($color, $color, 'Color must be a color');
  $check: ui-check-type($offset, pixel, 'Offset must be a value in pixels');
  outline: $width $style $color;
  outline-offset: $offset;
}

/**
 * Defines element's overflow behaviour.
 *
 * @param {visible|hidden|scroll|auto} $x Horizontal overflow handling method.
 *
 * @param {visible|hidden|scroll|auto} $y Vertical overflow handling method.
 */
@mixin ui-overflow($x: visible, $y: visible) {
  $overflows: visible hidden scroll auto;
  $errorMessage: 'Overflow must be `visible`, `hidden`, `scroll` or `auto`';
  $check: ui-check-type($x, $overflows, $errorMessage);
  $check: ui-check-type($y, $overflows, $errorMessage);
  overflow: $x $y;
}

/**
 * Defines element's dimensions.
 *
 * @param {(grid|percent|auto)[]} [$actual = default] Actual dimensions.
 * Example: `50gp auto`
 *
 * @param {(grid|percent|auto)[]} [$min = default] Minimal dimensions.
 * Example: `50% auto`
 *
 * @param {(grid|percent|auto)[]} [$max = default] Maximal dimensions.
 * Example: `50gp auto`
 *
 * @param {bool} [$includeBorders = default] Whether dimensions should include padding and borders.
 */
@mixin ui-size($actual: default, $min: default, $max: default, $includeBorders: default) {
  $errorMessage: 'Dimensions must be a list of 1 or 2 `auto` or pixels or percents values';
  $check: ui-check-length($actual, 1, 2, $errorMessage);
  $check: ui-check-type($actual, default auto grid percent, $errorMessage);
  $errorMessage: 'Min dimensions must be a list of 1 or 2 `auto` or pixels or percents values';
  $check: ui-check-length($min, 1, 2, $errorMessage);
  $check: ui-check-type($min, default auto grid percent, $errorMessage);
  $errorMessage: 'Max dimensions must be a list of 1 or 2 `none` or pixels or percents values';
  $check: ui-check-length($max, 1, 2, $errorMessage);
  $check: ui-check-type($max, default none grid percent, $errorMessage);
  $errorMessage: 'Borders inclusion must be a boolean';
  $check: ui-check-type($includeBorders, default bool, $errorMessage);
  // Allows user to use width value as a shorthand for all actual dimensions.
  $width: if(length($actual) == 2, nth($actual, 1), $actual);
  $height: if(length($actual) == 2, nth($actual, 2), $actual);
  @if ($actual != default) {
    width: ui-transpile($width);
    height: ui-transpile($height);
  }
  // Allows user to use width value as a shorthand for all min dimensions.
  $minWidth: if(length($min) == 2, nth($min, 1), $min);
  $minHeight: if(length($min) == 2, nth($min, 2), $min);
  @if ($min != default) {
    min-width: ui-transpile($minWidth);
    min-height: ui-transpile($minHeight);
  }
  // Allows user to use width value as a shorthand for all max dimensions.
  $maxWidth: if(length($max) == 2, nth($max, 1), $max);
  $maxHeight: if(length($max) == 2, nth($max, 2), $max);
  @if ($max != default) {
    max-width: ui-transpile($maxWidth);
    max-height: ui-transpile($maxHeight);
  }
  @if ($includeBorders != default) {
    box-sizing: if($includeBorders == true, border-box, content-box);
  }
}

/**
 * Defines element's positioning and coordinates.
 *
 * @param {absolute|fixed|relative|sticky|static} $type Type of positioning.
 * Example: `absolute`
 *
 * @param {(percent|grid|auto)[]} [$coordinates = auto] Element's coordinates.
 * Example: `50% auto 10% 5gp`
 *
 * @param {number} [$zIndex = -1] Element's position on z axis.
 * Example: `5`
 */
@mixin ui-position($type, $coordinates: auto, $zIndex: -1) {
  $errorMessage: 'Type of positioning must be `absolute`, `fixed, `relative`, `sticky or `static`';
  $check: ui-check-type($type, absolute fixed relative sticky static, $errorMessage);
  $errorMessage: 'Coordinates must be a list of one to four grid pixels or percents values or `auto`';
  $check: ui-check-length($coordinates, 1, 4, $errorMessage);
  $check: ui-check-type($coordinates, grid percent auto, $errorMessage);
  $check: ui-check-type($zIndex, number, 'Z-index must be a unitless number');
  position: $type;
  $top: nth($coordinates, 1);
  $right: if(length($coordinates) > 1, nth($coordinates, 2), 0);
  $bottom: if(length($coordinates) >= 3, nth($coordinates, 3), 0);
  $left: if(length($coordinates) == 4, nth($coordinates, 4), 0);
  @if ($coordinates != auto) {
    top: ui-transpile($top);
  }
  @if ($right != 0) {
    right: ui-transpile($right);
  }
  @if ($bottom != 0) {
    bottom: ui-transpile($bottom);
  }
  @if ($left != 0) {
    left: ui-transpile($left);
  }
  @if ($zIndex != -1) {
    z-index: $zIndex;
  }
}

/**
 * Defines element's margins.
 *
 * @param {(grid|percent|auto)[]} $margin Margins.
 * Example: `1gp auto 5gp 10%`
 */
@mixin ui-margins($margins) {
  $errorMessage: 'Margins must be a list of one to four grid pixels or percents values or `auto`';
  $check: ui-check-length($margins, 1, 4, $errorMessage);
  $check: ui-check-type($margins, grid percent auto, $errorMessage);
  margin: ui-transpile($margins);
}

/**
 * Defines element's paddings.
 *
 * @param {(grid|percent|auto)[]} $paddings Paddings.
 * Example: `1gp auto 5% 10gp`
 */
@mixin ui-paddings($paddings) {
  $errorMessage: 'Paddings must be a list of one to four grid pixels or percents values or `auto`';
  $check: ui-check-length($paddings, 1, 4, $errorMessage);
  $check: ui-check-type($paddings, grid percent auto, $errorMessage);
  padding: ui-transpile($paddings);
}

/**
 * Defines element's flex behaviour as a container.
 *
 * @param {alignment} $rowsVAlign Rows vertical alignment.
 * Example: `stretch`
 *
 * @param {alignment} [$itemsVAlign = stretch] Items vertical alignment.
 * Example: `stretch`
 *
 * @param {alignment} [$itemsHAlign = stretch] Items horizontal alignment.
 * Example: `stretch`
 *
 * @param {flexflow[]} [$flow = row wrap] Container's flex flow.
 * Example: `column wrap-reverse`
 */
@mixin ui-flex-container(
  $rowsVAlign,
  $itemsVAlign: stretch,
  $itemsHAlign: stretch,
  $flow: row wrap
) {
  $check: ui-check-type($rowsVAlign, alignment, 'Rows vertical alignment must be an alignment');
  $check: ui-check-type($itemsVAlign, alignment, 'Items vertical alignment must be an alignment');
  $check: ui-check-type($itemsHAlign, alignment, 'Items horizontal alignment must be an alignment');
  $errorMessage: 'Flex flow must contain a flex direction and a wrap behaviour';
  $check: ui-check-length($flow, 2, 2, $errorMessage);
  $check: ui-check-type($flow, flexflow, $errorMessage);
  display: flex;
  flex-flow: $flow;
  align-content: $rowsVAlign;
  align-items: $itemsVAlign;
  justify-content: $itemsHAlign;
}

/**
 * Defines element's flex behaviour as an item.
 *
 * @param {grid|percent} $basis Item's basis width.
 * Example: `50gp`
 *
 * @param {number} [$grow = 1] Item's relative width compared to the other items of the row.
 * Example: `2`
 *
 * @param {number} [$shrink = 1] How item should shrink compared to the other items of the row.
 * Example: `3`
 *
 * @param {alignment} [$vAlign = stretch] Item's vertical alignment.
 * Example: `stretch`
 */
@mixin ui-flex-item($basis, $grow: 1, $shrink: 1, $vAlign: stretch) {
  $errorMessage: "Item's basis width must be a value in pixels or percents";
  $check: ui-check-type($basis, grid percent, $errorMessage);
  $check: ui-check-type($grow, number, "Item's grow must be a unitless number");
  $check: ui-check-type($shrink, number, "Item's shrink must be a unitless number");
  $check: ui-check-type($vAlign, alignment, "Item's vertical alignment must be an alignment");
  flex: $grow $shrink $basis;
  align-self: $vAlign;
}

/**
 * Defines element's grid behaviour as a container.
 *
 * @param {(percent|grid|auto|max-content|min-content)[]} [$rowsSize = auto] Rows size. If only one
 * value is passed, it will be applied to all rows.
 * Example: `10gp 30% auto`
 *
 * @param {(percent|grid|auto|max-content|min-content)[]} [$columnsSize = auto] Columns size. If
 * only one value is passed, it will be applied to all columns.
 * Example: `10gp 30% auto`
 *
 * @param {(grid|percent)[]} [$gap = 0% 0%] Gap to apply between rows and columns.
 * Example: `10gp 4%`
 *
 * @param {row|column|dense|row-dense|column-dense} [$flow = row] Container's grid flow.
 * Example: `column`
 */
@mixin ui-grid-container($rowsSize: auto, $columnsSize: auto, $gap: 0% 0%, $flow: row) {
  $errorMessage: 'Rows size must be a list of `auto`, `max-content`, `min-content` or grid pixels or percents values';
  $check: ui-check-type($rowsSize, grid percent auto max-content min-content, $errorMessage);
  $errorMessage: 'Columns size must be a list of `auto`, `max-content`, `min-content` or grid pixels or percents values';
  $check: ui-check-type($rowsSize, grid percent auto max-content min-content, $errorMessage);
  $errorMessage: 'Gap must be a list of 1 or 2 values in grid pixels or percents';
  $check: ui-check-length($gap, 1, 2, $errorMessage);
  $check: ui-check-type($gap, grid percent, $errorMessage);
  $errorMessage: 'Grid flow must be `row`, `column`, `dense`, `row-dense` or `column-dense`';
  $check: ui-check-type($flow, row column dense row-dense column-dense, $errorMessage);
  display: grid;
  @if (length($rowsSize) == 1) {
    grid-auto-rows: ui-transpile($rowsSize);
  } @else {
    grid-template-rows: ui-transpile($rowsSize);
  }
  @if (length($columnsSize) == 1) {
    grid-auto-columns: ui-transpile($columnsSize);
  } @else {
    grid-template-columns: ui-transpile($columnsSize);
  }
  @if ($gap != 0% 0%) {
    grid-gap: ui-transpile($gap);
  }
  grid-auto-flow: $flow;
}

/**
 * Defines element's grid behaviour as an item.
 *
 * @param {auto|number[]} [$rows = auto] Defines indices of the rows at which item starts and ends.
 * Example: `3 7`
 *
 * @param {auto|number[]} [$columns = auto] Defines indices of the columns at which item starts and ends.
 * Example: `1 2`
 */
@mixin ui-grid-item($rows: auto, $columns: auto) {
  $errorMessage: 'Start and end rows indices must be `auto` or a list of 1 or 2 unitless numbers';
  $check: ui-check-length($rows, 1, 2, $errorMessage);
  $check: ui-check-type($rows, auto number, $errorMessage);
  $errorMessage: 'Start and end columns indices must be `auto` or a list of 1 or 2 unitless numbers';
  $check: ui-check-length($columns, 1, 2, $errorMessage);
  $check: ui-check-type($columns, auto number, $errorMessage);
  @if (length($rows) == 1) {
    grid-row: $rows;
  } @else {
    grid-row: nth($rows, 1) unquote('/') nth($rows, 2);
  }
  @if (length($columns) == 1) {
    grid-column: $columns;
  } @else {
    grid-column: nth($columns, 1) unquote('/') nth($columns, 2);
  }
}

/**
 * Defines element's columns behaviour as a container.
 *
 * @param {grid|auto} $minWidth Minimum columns size.
 * Example: `15gp`
 *
 * @param {number|auto} $maxColumns Maximum number of columns
 * Example: `3`
 *
 * @param {balance|auto} [$fill = balance] Columns filling behaviour.
 * Example: `balance`
 *
 * @param {grid} [$gap = -1gp] Size of the gap between each column.
 * Example: `3gp`
 *
 * @param {pixel borderstyle color} [$rule = 0px] Style of the rule between each column.
 * Example: `1px solid blue`
 */
@mixin ui-column-container($minWidth, $maxColumns, $fill: balance, $gap: -1gp, $rule: 0px) {
  $errorMessage: 'Minimum columns width must be `auto` or a value in grid pixels';
  $check: ui-check-type($minWidth, auto grid, $errorMessage);
  $errorMessage: 'Maximum number of columns must be a unitless number or `auto`';
  $check: ui-check-type($maxColumns, auto number, $errorMessage);
  $errorMessage: 'Columns filling behaviour must be `balance` or `auto`';
  $check: ui-check-type($fill, auto balance, $errorMessage);
  $errorMessage: 'Columns gap must be a value in grid pixels';
  $check: ui-check-type($gap, grid, $errorMessage);
  $errorMessage: 'Columns rule must contain a value in pixels, a border style and a color';
  $check: ui-check-length($rule, 1, 3, $errorMessage);
  $check: ui-check-type($rule, pixel borderstyle color, $errorMessage);
  columns: ui-transpile($minWidth) $maxColumns;
  column-fill: $fill;
  @if ($gap != -1gp) {
    column-gap: ui-transpile($gap);
  }
  @if ($rule != 0px) {
    column-rule: $rule;
  }
}

/**
 * Defines element's columns behaviour as an item.
 *
 * @param {none|all} $span Whether to span current item over all columns.
 * Example: `all`
 */
@mixin ui-column-item($span) {
  $check: ui-check-type($span, none all, 'Spanning behaviour must be `none` or `all`');
  column-span: $span;
}

/**
 * Defines element's font properties.
 *
 * @param {string[]} [$family = default] Font family.
 * Example: `("Times New Roman", Arial, sans-serif)`
 *
 * @param {percent|pixel} [$size = default] Font size.
 * Example: `30%`
 *
 * @param {percent|pixel} [$height = default] Line height.
 * Example: `130%`
 *
 * @param {color} [$color = default] Font color.
 * Example: `blue`
 *
 * @param {100|200|300|400|500|600|700|800|900} [$weight = default] Font weight.
 * Example: `900`
 *
 * @param {normal|italic|oblique} [$style = default] Font style.
 * Example: `italic`
 *
 * @param {normal|small-caps} [$variant = default] Font variant.
 * Example: `small-caps`
 *
 * @param {auto|normal|none} [$kerning = default] Font kerning.
 * Example: `auto`
 *
 * @param {fontstretch} [$stretch = default] Font stretch.
 * Example: `normal`
 */
@mixin ui-font(
  $family: default,
  $size: default,
  $height: default,
  $color: default,
  $weight: default,
  $style: default,
  $variant: default,
  $kerning: default,
  $stretch: default
) {
  $weights: default 100 200 300 400 500 600 700 800 900;
  $check: ui-check-type($family, default string, 'Font family must be a list of fonts');
  $errorMessage: 'Font size must be a value in pixels or percents';
  $check: ui-check-type($size, default pixel percent, $errorMessage);
  $errorMessage: 'Line height must be a pixels or percents value';
  $check: ui-check-type($height, default pixel percent, $errorMessage);
  $check: ui-check-type($color, default color, 'Font color must be a color');
  $check: ui-check-type($weight, $weights, 'Font weight must be a hundred between 100 and 900');
  $errorMessage: 'Font style must be `normal`, `italic` or `oblique`';
  $check: ui-check-type($style, default normal italic oblique, $errorMessage);
  $errorMessage: 'Font variant must be `normal` or `small-caps`';
  $check: ui-check-type($variant, default normal small-caps, $errorMessage);
  $errorMessage: 'Font kerning must be `normal`, `auto` or `none`';
  $check: ui-check-type($kerning, default normal auto none, $errorMessage);
  $check: ui-check-type($stretch, default fontstretch, 'Font stretch must be a valid stretch');
  @if ($family != default and index($size $height $weight $style $variant, default) == null) {
    font: $style $variant $weight $size unquote('/') $height $family;
  } @else {
    @if ($family != default) {
      font-family: $family;
    }
    @if ($size != default) {
      font-size: $size;
    }
    @if ($height != default) {
      line-height: $height;
    }
    @if ($variant != default) {
      font-variant: $variant;
    }
    @if ($weight != default) {
      font-weight: $weight;
    }
  }
  @if ($kerning != default) {
    font-kerning: $kerning;
  }
  @if ($stretch != default) {
    font-stretch: $stretch;
  }
  @if ($color != default) {
    color: $color;
  }
}

/**
 * Defines element's visibility.
 *
 * @param {hidden|none} $behaviour Element's displaying behaviour.
 * See https://stackoverflow.com/questions/272360/does-opacity0-have-exactly-the-same-effect-as-visibilityhidden/273076#273076.
 * Example: `hidden`
 */
@mixin ui-display($behaviour) {
  $check: ui-check-type($behaviour, hidden none, 'Displaying behaviour must be `hidden` or `none`');
  @if ($behaviour == none) {
    display: none;
  } @else {
    visibility: hidden;
  }
}

/**
 * Defines element's behaviour for user interactions.
 *
 * @param {all|none} [$events = default] Pointer events.
 * Example: `none`
 *
 * @param {string} [$cursor = default] Cursor style.
 * Example: `text`
 *
 * @param {auto|none|text|all} [$select = default] User select behaviour.
 * Example: `none`
 *
 * @param {none|both|horizontal|vertical} [$resize = default] Resizing behaviour.
 * Example: `none`
 *
 * @param {color} [$caret = default] Caret color.
 * Example: `red`
 *
 * @param {auto|smooth} [$scroll = default] Scrolling behaviour.
 * Example: `smooth`
 */
@mixin ui-user-interactions(
  $events: default,
  $cursor: default,
  $select: default,
  $resize: default,
  $caret: default,
  $scroll: default
) {
  $resizes: default none both horizontal vertical;
  $check: ui-check-type($events, default all none, 'Pointer events must be `auto` or `none`');
  $check: ui-check-type($cursor, default string, 'Cursor must be a string');
  $errorMessage: 'User select must be a `auto`, `none`, `text` or `all`';
  $check: ui-check-type($select, default auto none text all, $errorMessage);
  $check: ui-check-type($caret, default auto color, 'Caret color must be `auto` or a color');
  $errorMessage: 'Scrolling behaviour must be `auto` or `smooth`';
  $check: ui-check-type($scroll, default auto smooth, $errorMessage);
  $errorMessage: 'Resizing behaviour must be `none`, `both`, `horizontal` or `vertical`';
  $check: ui-check-type($resize, $resizes, $errorMessage);
  @if ($cursor != default) {
    cursor: $cursor;
  }
  @if ($select != default) {
    user-select: $select;
  }
  @if ($caret != default) {
    caret-color: $caret;
  }
  @if ($resize != default) {
    resize: $resize;
  }
  @if ($scroll != default) {
    scroll-behavior: $scroll;
  }
  @if ($events != default) {
    pointer-events: $events;
  }
}

/**
 * Defines element's text properties.
 *
 * @param {none|(underline|overline|line-through|borderstyle|color)[]} [$decoration = default] Text decoration.
 * Example: `underline overline solid red`
 *
 * @param {none|(pixel color)[]} [$shadow = default] Text shadow.
 * Example: `3px 3px 5px blue`
 *
 * @param {none|capitalize|uppercase|lowercase} [$transform = default] Text transformation.
 * Example: `capitalize`
 *
 * @param {clip|ellipsis} [$overflow = default] Overflow behaviour.
 * Example: `ellipsis`
 *
 * @param {none|mixed|upright|sideways} [$orientation = default] Text orientation.
 * Example: `mixed`
 */
@mixin ui-text(
  $decoration: default,
  $shadow: default,
  $transform: default,
  $overflow: default,
  $orientation: default
) {
  $lines: underline overline line-through;
  $styles: solid double dotted dashed wavy unset;
  $decorations: join(join(default none color pixel, $lines), $styles);
  $errorMessage: 'Text decoration must be `none` or a list of decoration lines, style and color';
  $check: ui-check-length($decoration, 1, 5, $errorMessage);
  $check: ui-check-type($decoration, $decorations, $errorMessage);
  $errorMessage: 'Text shadow must be `none` or a list of 3 values in pixels and a color';
  $check: ui-check-length($shadow, 1, 4, $errorMessage);
  $check: ui-check-type($shadow, default none pixel color, $errorMessage);
  $errorMessage: 'Text transform must be `none`, `capitalize`, `uppercase` or `lowercase`';
  $check: ui-check-type($transform, default none capitalize uppercase lowercase, $errorMessage);
  $errorMessage: 'Text overflow must be `clip` or `ellipsis`';
  $check: ui-check-type($overflow, default clip ellipsis, $errorMessage);
  $errorMessage: 'Text orientation must be `mixed`, `upright` or `sideways`';
  $check: ui-check-type($orientation, default none mixed upright sideways, $errorMessage);
  @if ($overflow != default) {
    text-overflow: $overflow;
  }
  @if ($transform != default) {
    text-transform: $transform;
  }
  @if ($decoration != default) {
    text-decoration: $decoration;
  }
  @if ($shadow != default) {
    text-shadow: $shadow;
  }
  @if ($orientation != default) {
    text-orientation: $orientation;
    writing-mode: vertical-lr;
  }
}

/**
 * Defines element's text horizontal and vertical alignments.
 *
 * @param {left|right|center|justify} $horizontal Horizontal alignment.
 * Example: `right`
 *
 * @param {pixel|percent} [$vertical = 0px] Vertical alignment.
 * Example: `3px`
 */
@mixin ui-text-align($horizontal, $vertical: 0px) {
  $errorMessage: 'Text horizontal alignment must be `left`, `right`, `center` or `justify`';
  $check: ui-check-type($horizontal, left right center justify, $errorMessage);
  $errorMessage: 'Text vertical alignment must be a value in pixels or percents';
  $check: ui-check-type($vertical, pixel percent, $errorMessage);
  text-align: $horizontal;
  vertical-align: $vertical;
}

/**
 * Defines element's text breaks.
 *
 * @param {auto|loose|normal|strict|anywhere} [$line = default] Line break.
 * Example: `normal`
 *
 * @param {normal|break-all|keep-all} [$word = default] Word break.
 * Example: `keep-all`
 *
 * @param {normal|pre|nowrap|pre-wrap|pre-line|break-spaces} [$space = default] Space break.
 * Example: `nowrap`
 */
@mixin ui-text-break($line: default, $word: default, $space: default) {
  $spaces: default normal pre nowrap pre-wrap pre-line break-spaces;
  $errorMessage: 'Line break must be `auto`, `loose`, `normal`, `strict` or `anywhere`';
  $check: ui-check-type($line, default auto loose normal strict anywhere, $errorMessage);
  $errorMessage: 'Word break must be `normal`, `break-all` or `keep-all`';
  $check: ui-check-type($word, default normal break-all keep-all, $errorMessage);
  $errorMessage: 'Space break must be `normal`, `pre`, `nowrap`, `pre-wrap`, `pre-line` or `break-spaces`';
  $check: ui-check-type($space, $spaces, $errorMessage);
  @if ($line != default) {
    line-break: $line;
  }
  @if ($word != default) {
    word-break: $word;
  }
  @if ($space != default) {
    white-space: $space;
  }
}

/**
 * Defines element's text spacing.
 *
 * @param {pixel|percent} [$line = default] Line spacing.
 * Example: `50%`
 *
 * @param {pixel|percent} [$word = default] Extra word spacing.
 * Example: `5px`
 *
 * @param {pixel} [$letter = default] Extra letter spacing.
 * Example: `5px`
 */
@mixin ui-text-spacing($line: default, $word: default, $letter: default) {
  $errorMessage: 'Text indent must be a value in pixels or percents';
  $check: ui-check-type($line, default pixel percent, $errorMessage);
  $errorMessage: 'Word spacing must be a value in pixels or percents';
  $check: ui-check-type($word, default pixel percent, $errorMessage);
  $errorMessage: 'Letter spacing must be a value in pixels';
  $check: ui-check-type($letter, default pixel, $errorMessage);
  @if ($line != default) {
    text-indent: $line;
  }
  @if ($word != default) {
    word-spacing: $word;
  }
  @if ($letter != default) {
    letter-spacing: $letter;
  }
}

/**
 * Defines element's opacity.
 *
 * @param {number} $value Opacity.
 * Example: `0.2`
 */
@mixin ui-opacity($value) {
  $check: ui-check-type($value, number, 'Opacity must be a number between 0 and 1');
  opacity: $value;
}

/**
 * Defines element's clip.
 *
 * @param {auto|string} $shape Clip shape.
 * Example: `rect(5px, 5px, 2px, 10px)`
 */
@mixin ui-clip($shape) {
  $check: ui-check-type($shape, auto string, 'Shape must be `auto` or a valid shape');
  clip: $shape;
}

/**
 * Defines element's transition.
 *
 * @param {none|all|string[]} $properties Properties on which to apply transition.
 * Example: `width, height`
 *
 * @param {number} $duration Transition's duration.
 * Example: `5s`
 *
 * @param {string} $function Transition's timing function.
 * Example: `ease-in`
 *
 * @param {number} [$delay = 0s] Delay before which to start transition.
 * Example: `5s`
 */
@mixin ui-transition($properties, $duration, $function, $delay: 0s) {
  $errorMessage: 'Properties must be `none`, `all`, or a list of CSS properties';
  $check: ui-check-type($properties, none all string, $errorMessage);
  $check: ui-check-type($duration, number, 'Duration must be a value in seconds');
  $check: ui-check-type($function, string, 'Function must be a valid timing function');
  $check: ui-check-type($delay, number, 'Delay must be a value in seconds');
  transition: $properties $duration $function $delay;
}

/**
 * Defines element's animation.
 *
 * @param {none|string} $name Animation's name.
 * Example: `myAnimation`
 *
 * @param {paused|running} [$state = default] Animation's state.
 * Example: `running`
 *
 * @param {number} [$duration = default] Animation's duration.
 * Example: `5s`
 *
 * @param {string} [$function = default] Animation's timing function.
 * Example: `ease-in`
 *
 * @param {number} [$delay = default] Delay before which to start Animation.
 * Example: `5s`
 *
 * @param {normal|reverse|alternate|alternate-reverse} [$direction = default] Animation's direction.
 * Example: `reverse`
 *
 * @param {none|forwards|backwards|both} [$mode = default] Animation's fill mode.
 * Example: `forwards`
 *
 * @param {infinite|number} [$iterations = default] How many times animation should run.
 * Example: `infinite`
 */
@mixin ui-animation(
  $name,
  $state: default,
  $duration: default,
  $function: default,
  $delay: default,
  $direction: default,
  $mode: default,
  $iterations: default
) {
  $directions: default normal reverse alternate alternate-reverse;
  $check: ui-check-type($name, none string, 'Name must be `none` or a name');
  $check: ui-check-type($state, default paused running, 'State must be `paused` or `running`');
  $check: ui-check-type($duration, default number, 'Duration must be a value in seconds');
  $check: ui-check-type($function, default string, 'Function must be a valid timing function');
  $check: ui-check-type($delay, default number, 'Delay must be a value in seconds');
  $errorMessage: 'Direction muse be `normal`, `reverse`, `alternate` or `alternate-reverse`';
  $check: ui-check-type($direction, $directions, $errorMessage);
  $errorMessage: 'Fill mode muse be `none`, `forwards`, `backwards` or `both`';
  $check: ui-check-type($mode, default none forwards backwards both, $errorMessage);
  $errorMessage: 'Iterations count muse be a unitless number or `infinite`';
  $check: ui-check-type($iterations, default infinite number, $errorMessage);
  @if (index($duration $function $delay $direction $mode $iterations, default) == null) {
    animation: $name $duration $function $delay $iterations $direction $mode;
  } @else {
    animation-name: $name;
    @if ($state != default) {
      animation-play-state: $state;
    }
    @if ($duration != default) {
      animation-duration: $duration;
    }
    @if ($function != default) {
      animation-timing-function: $function;
    }
    @if ($delay != default) {
      animation-delay: $delay;
    }
    @if ($iterations != default) {
      animation-iteration-count: $iterations;
    }
    @if ($direction != default) {
      animation-direction: $direction;
    }
    @if ($mode != default) {
      animation-fill-mode: $mode;
    }
  }
}

/**
 * Defines element's 3D transformations.
 *
 * @param {none|string} $function Transformation function.
 * Example: `rotateX(90deg)`
 *
 * @param {(grid|percent)[]} [$origin = default default default] Transformation origin.
 * Example: `90gp 10gp 6%`
 *
 * @param {bool} [$preserve3d = default] Whether to preserve 3D.
 * Example: `false`
 *
 * @param {visible|hidden} [$backface = default] Whether backface should be visible.
 * Example: `hidden`
 *
 * @param {(grid|percent)[]} [$perspective = default] Perspective origins (z, x, y).
 * Example: `10gp 5% 50gp`
 */
@mixin ui-3d(
  $function,
  $origin: default default default,
  $preserve3d: default,
  $backface: default,
  $perspective: default
) {
  $check: ui-check-type($function, none string, 'Transform function must be `none` or a function');
  $errorMessage: 'Transform origin must be a list of 3 values in grid pixels or percents';
  $check: ui-check-length($origin, 3, 3, $errorMessage);
  $check: ui-check-type($origin, default grid percent, $errorMessage);
  $check: ui-check-type($preserve3d, default bool, 'Whether to preserve 3D must be a boolean');
  $errorMessage: 'Backface visibility must be `hidden` or `visible`';
  $check: ui-check-type($backface, default hidden visible, $errorMessage);
  $errorMessage: 'Perspective must be a list of 1 or 3 values in grid pixels or percents';
  $check: ui-check-length($perspective, 1, 3, $errorMessage);
  $check: ui-check-type($perspective, default grid percent, $errorMessage);
  transform: $function;
  @if ($origin != default default default) {
    transform-origin: $origin;
  }
  @if ($preserve3d != default) {
    transform-style: if($preserve3d == true, preserve-3d, flat);
  }
  @if ($backface != default) {
    backface-visibility: $backface;
  }
  @if ($perspective != default) {
    perspective: nth($perspective, 1);
  }
  @if (length($perspective) == 3) {
    perspective-origin: nth($perspective, 2) nth($perspective, 3);
  }
}

/**
 * Defines element's advanced graphical effects.
 *
 * @param {string} $blendMode Blending mode.
 * Example: `multiply`
 *
 * @param {string} [$filter = default] Filter to apply to the element.
 * Example: `grayscale(80%)`
 *
 * @param {bool} [$isolate = default] Whether to isolate element from its parent.
 * Example: `true`
 *
 * @param {unset|slice|clone} [$break = default] Box decoration break.
 * Example: `slice`
 */
@mixin ui-effects($blendMode, $filter: default, $isolate: default, $break: default) {
  $check: ui-check-type($blendMode, string, 'Blending mode must be a valid mode');
  $check: ui-check-type($filter, default string, 'Filter must be a filtering method');
  $check: ui-check-type($isolate, default bool, 'Whether to isolate element must be a boolean');
  $errorMessage: 'Box decoration break must be `unset`, `slice` or `clone`';
  $check: ui-check-type($filter, default slice clone unset, $errorMessage);
  mix-blend-mode: $blendMode;
  @if ($filter != default) {
    filter: $filter;
  }
  @if ($isolate != default) {
    isolation: if($isolate == true, isolate, auto);
  }
  @if ($break != default) {
    box-decoration-break: $break;
  }
}

/**
 * Defines element's list style.
 *
 * @param {string} $type List style type.
 * Example: `disc`
 *
 * @param {string} [$image = ''] List style image.
 * Example: `url(../../bullet.svg)`
 *
 * @param {outside|inside} [$position = outside] List style position.
 * Example: `inside`
 */
@mixin ui-list($type, $image: '', $position: outside) {
  $positions: outside inside;
  $check: ui-check-type($type, string, 'List style type must be a valid type');
  $check: ui-check-type($image, string, 'List style image must be an image');
  $check: ui-check-type($position, $positions, 'List style position must be `outside` or `inside`');
  list-style: $type $position $image;
}
