/**
 * Copyright (c) Matthieu Jabbour. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

$UI_SASS_TYPES: (number, string, bool, color, list, map, null);
$SASS_UNITS: (cm, mm, in, px, pt, pc, em, ex, ch, rem, vw, vh, vmin, vmax, '%');
$SASS_POSITIONS: (absolute, fixed, relative, sticky, inherit);
$UI_BORDER_STYLES: (hidden, dotted, dashed, solid, double, groove, ridge, inset, outset);
$UI_ALIGNMENTS: stretch center flex-start flex-end space-between space-around baseline;
$UI_FLEX_FLOWS: row row-reverse column column-reverse nowrap wrap wrap-reverse;
$UI_FONT_STRETCHS: ultra-condensed extra-condensed condensed semi-condensed normal semi-expanded
  expanded extra-expanded ultra-expanded;
@function ui-is-list-of($list, $types) {
  @each $item in $list {
    @if (not ui-is($item, $types)) {
      @return false;
    }
  }
  @return true;
}
@function ui-is($value, $types) {
  // TODO : deal with variables like "5zadzad54dp" which are considered as numbers
  // although they are not.
  @each $type in $types {
    $valueType: type-of($value);
    $isSassType: (index($UI_SASS_TYPES, $type) != null and $valueType == $type);
    $isEqual: (not $isSassType and $value == $type);
    $isPixel: ($valueType == number and unit($value) == 'px');
    $isGridPixel: ($valueType == number and unit($value) == 'gp');
    $isPercent: ($valueType == number and unit($value) == '%');
    $isBorder: ($valueType == string and index($UI_BORDER_STYLES, $value) != null);
    $isAlignment: ($valueType == string and index($UI_ALIGNMENTS, $value) != null);
    $isFlexFlow: ($valueType == string and index($UI_FLEX_FLOWS, $value) != null);
    $isFontStretch: ($valueType == string and index($UI_FONT_STRETCHS, $value) != null);
    @if (
      $isSassType or
        $isEqual or
        $isPixel and
        $type ==
        'pixel' or
        $isPercent and
        $type ==
        'percent' or
        $isGridPixel and
        $type ==
        'grid' or
        $isBorder and
        $type ==
        'borderstyle' or
        $isAlignment and
        $type ==
        'alignment' or
        $isFlexFlow and
        $type ==
        'flexflow' or
        $isFontStretch and
        $type ==
        'fontstretch'
    ) {
      @return true;
    }
  }
  @return false;
}

@function ui-check-type($value, $types, $message) {
  @if (not ui-is-list-of($value, $types)) {
    @error ("#{$message}, but received '#{$value}'.");
  }
  @return null;
}

@function ui-check-length($variable, $min, $max, $message) {
  @if (length($variable) < $min or length($variable) > $max) {
    @error ("#{$message}, but received '#{$variable}'.");
  }
  @return null;
}

@function ui-transpile($value) {
  @if (ui-is($value, number)) {
    @if (to-lower-case(unit($value)) == 'gp') {
      @return floor($value) * 4 / ($value * 0 + 1) + px;
    }
  } @else if (ui-is($value, list)) {
    $transpiledList: ();
    @each $item in $value {
      $transpiledList: append($transpiledList, ui-transpile($item));
    }
    @return $transpiledList;
  }
  // @if (map-has-key($colors, $value)) {
  //   @return map-get($colors, $value);
  // } @else {
  //   @return $value;
  // }
  @return $value;
}
